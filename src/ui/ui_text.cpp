#include "ui/ui_text.h"

#include <vector>
#include <string>
#include <cmath>
#include <algorithm>

namespace wf::ui {
namespace {
static constexpr int kGlyphWidth = 6;
static constexpr int kGlyphHeight = 8;

static const unsigned char kFont6x8[96][8] = {
    {0,0,0,0,0,0,0,0}, {0x04,0x04,0x04,0x04,0x04,0x00,0x04,0x00}, {0x0a,0x0a,0x0a,0x00,0x00,0x00,0x00,0x00},
    {0x0a,0x1f,0x0a,0x0a,0x1f,0x0a,0x00,0x00}, {0x04,0x1e,0x05,0x0e,0x14,0x0f,0x04,0x00}, {0x03,0x13,0x08,0x04,0x02,0x19,0x18,0x00},
    {0x06,0x09,0x05,0x02,0x15,0x09,0x16,0x00}, {0x06,0x02,0x04,0x00,0x00,0x00,0x00,0x00}, {0x08,0x04,0x02,0x02,0x02,0x04,0x08,0x00},
    {0x02,0x04,0x08,0x08,0x08,0x04,0x02,0x00}, {0x04,0x15,0x0e,0x04,0x0e,0x15,0x04,0x00}, {0x00,0x04,0x04,0x1f,0x04,0x04,0x00,0x00},
    {0x00,0x00,0x00,0x00,0x06,0x02,0x04,0x00}, {0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x00}, {0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x00},
    {0x10,0x10,0x08,0x04,0x02,0x01,0x01,0x00}, {0x0e,0x11,0x13,0x15,0x19,0x11,0x0e,0x00}, {0x04,0x06,0x04,0x04,0x04,0x04,0x1f,0x00},
    {0x0e,0x11,0x10,0x0c,0x02,0x01,0x1f,0x00}, {0x1f,0x10,0x0c,0x10,0x10,0x11,0x0e,0x00}, {0x08,0x0c,0x0a,0x09,0x1f,0x08,0x08,0x00},
    {0x1f,0x01,0x0f,0x10,0x10,0x11,0x0e,0x00}, {0x0c,0x02,0x01,0x0f,0x11,0x11,0x0e,0x00}, {0x1f,0x10,0x08,0x04,0x02,0x02,0x02,0x00},
    {0x0e,0x11,0x11,0x0e,0x11,0x11,0x0e,0x00}, {0x0e,0x11,0x11,0x1e,0x10,0x08,0x06,0x00}, {0x00,0x06,0x06,0x00,0x06,0x06,0x00,0x00},
    {0x00,0x06,0x06,0x00,0x06,0x02,0x04,0x00}, {0x08,0x04,0x02,0x01,0x02,0x04,0x08,0x00}, {0x00,0x00,0x1f,0x00,0x1f,0x00,0x00,0x00},
    {0x02,0x04,0x08,0x10,0x08,0x04,0x02,0x00}, {0x0e,0x11,0x10,0x08,0x04,0x00,0x04,0x00}, {0x0e,0x11,0x1d,0x15,0x1d,0x01,0x0e,0x00},
    {0x0e,0x11,0x11,0x1f,0x11,0x11,0x11,0x00}, {0x0f,0x11,0x11,0x0f,0x11,0x11,0x0f,0x00}, {0x0e,0x11,0x01,0x01,0x01,0x11,0x0e,0x00},
    {0x0f,0x11,0x11,0x11,0x11,0x11,0x0f,0x00}, {0x1f,0x01,0x01,0x0f,0x01,0x01,0x1f,0x00}, {0x1f,0x01,0x01,0x0f,0x01,0x01,0x01,0x00},
    {0x0e,0x11,0x01,0x1d,0x11,0x11,0x1e,0x00}, {0x11,0x11,0x11,0x1f,0x11,0x11,0x11,0x00}, {0x0e,0x04,0x04,0x04,0x04,0x04,0x0e,0x00},
    {0x1c,0x08,0x08,0x08,0x08,0x09,0x06,0x00}, {0x11,0x09,0x05,0x03,0x05,0x09,0x11,0x00}, {0x01,0x01,0x01,0x01,0x01,0x01,0x1f,0x00},
    {0x11,0x1b,0x15,0x11,0x11,0x11,0x11,0x00}, {0x11,0x11,0x13,0x15,0x19,0x11,0x11,0x00}, {0x0e,0x11,0x11,0x11,0x11,0x11,0x0e,0x00},
    {0x0f,0x11,0x11,0x0f,0x01,0x01,0x01,0x00}, {0x0e,0x11,0x11,0x11,0x15,0x09,0x16,0x00}, {0x0f,0x11,0x11,0x0f,0x05,0x09,0x11,0x00},
    {0x1e,0x01,0x01,0x0e,0x10,0x10,0x0f,0x00}, {0x1f,0x04,0x04,0x04,0x04,0x04,0x04,0x00}, {0x11,0x11,0x11,0x11,0x11,0x11,0x0e,0x00},
    {0x11,0x11,0x11,0x11,0x11,0x0a,0x04,0x00}, {0x11,0x11,0x11,0x11,0x15,0x1b,0x11,0x00}, {0x11,0x11,0x0a,0x04,0x0a,0x11,0x11,0x00},
    {0x11,0x11,0x0a,0x04,0x04,0x04,0x04,0x00}, {0x1f,0x10,0x08,0x04,0x02,0x01,0x1f,0x00}, {0x0e,0x02,0x02,0x02,0x02,0x02,0x0e,0x00},
    {0x01,0x01,0x02,0x04,0x08,0x10,0x10,0x00}, {0x0e,0x08,0x08,0x08,0x08,0x08,0x0e,0x00}, {0x04,0x0a,0x11,0x00,0x00,0x00,0x00,0x00},
    {0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00}, {0x06,0x04,0x08,0x00,0x00,0x00,0x00,0x00}, {0x00,0x00,0x0e,0x10,0x1e,0x11,0x1e,0x00},
    {0x01,0x01,0x0f,0x11,0x11,0x11,0x0f,0x00}, {0x00,0x00,0x0e,0x01,0x01,0x01,0x0e,0x00}, {0x10,0x10,0x1e,0x11,0x11,0x11,0x1e,0x00}, {0x00,0x00,0x0e,0x11,0x1f,0x01,0x0e,0x00},
    {0x0c,0x02,0x0f,0x02,0x02,0x02,0x02,0x00}, {0x00,0x00,0x1e,0x11,0x11,0x1e,0x10,0x0e}, {0x01,0x01,0x0f,0x11,0x11,0x11,0x11,0x00}, {0x00,0x04,0x00,0x06,0x04,0x04,0x0e,0x00},
    {0x00,0x08,0x00,0x0c,0x08,0x08,0x06,0x00}, {0x01,0x01,0x09,0x05,0x03,0x05,0x09,0x00}, {0x06,0x04,0x04,0x04,0x04,0x04,0x0e,0x00}, {0x00,0x00,0x1b,0x15,0x15,0x11,0x11,0x00},
    {0x00,0x00,0x0f,0x11,0x11,0x11,0x11,0x00}, {0x00,0x00,0x0e,0x11,0x11,0x11,0x0e,0x00}, {0x00,0x00,0x0f,0x11,0x11,0x0f,0x01,0x01}, {0x00,0x00,0x1e,0x11,0x11,0x1e,0x10,0x10},
    {0x00,0x00,0x0d,0x13,0x01,0x01,0x01,0x00}, {0x00,0x00,0x1e,0x01,0x0e,0x10,0x0f,0x00}, {0x02,0x02,0x0f,0x02,0x02,0x02,0x0c,0x00}, {0x00,0x00,0x11,0x11,0x11,0x11,0x0e,0x00},
    {0x00,0x00,0x11,0x11,0x11,0x0a,0x04,0x00}, {0x00,0x00,0x11,0x11,0x15,0x1b,0x11,0x00}, {0x00,0x00,0x11,0x0a,0x04,0x0a,0x11,0x00}, {0x00,0x00,0x11,0x11,0x11,0x1e,0x10,0x0e},
    {0x00,0x00,0x1f,0x08,0x04,0x02,0x1f,0x00}, {0x18,0x04,0x04,0x03,0x04,0x04,0x18,0x00}, {0x04,0x04,0x04,0x00,0x04,0x04,0x04,0x00}, {0x03,0x04,0x04,0x18,0x04,0x04,0x03,0x00},
    {0x08,0x15,0x02,0x00,0x00,0x00,0x00,0x00}, {0,0,0,0,0,0,0,0}
};

static std::vector<std::string> split_lines(const char* text) {
    std::vector<std::string> lines;
    if (!text) return lines;
    const int cap = 512;
    std::string cur;
    cur.reserve(128);
    int total = 0;
    const char* p = text;
    while (*p && total < cap) {
        if (*p == '\n') {
            lines.push_back(cur);
            cur.clear();
            ++p;
            continue;
        }
        cur.push_back(*p++);
        ++total;
    }
    lines.push_back(cur);
    return lines;
}

} // namespace

void add_text_block(UIContext& ctx, const char* text, int screen_width, const TextDrawParams& params) {
    if (!text) return;
    std::vector<std::string> lines = split_lines(text);
    const float scale = params.scale;
    const float origin_x = params.origin_px.x;
    const float origin_y = params.origin_px.y;
    const float margin_right = params.margin_right_px;
    const float line_spacing = params.line_spacing_px;

    int char_px = static_cast<int>(std::ceil(kGlyphWidth * scale));
    int max_fit = 0;
    if (char_px > 0) {
        float available = static_cast<float>(screen_width) - (origin_x + margin_right);
        if (available > 0.0f) {
            max_fit = static_cast<int>(std::floor(available / char_px));
            if (max_fit < 0) max_fit = 0;
        }
    }

    const float line_height = kGlyphHeight * scale + line_spacing;
    Color color = params.color;

    for (std::size_t li = 0; li < lines.size(); ++li) {
        std::string line;
        if (!params.ellipsis) {
            line = lines[li];
        } else if (max_fit <= 0) {
            line.clear();
        } else if (static_cast<int>(lines[li].size()) <= max_fit) {
            line = lines[li];
        } else {
            int keep = std::max(0, max_fit - 3);
            if (keep > 0) {
                line.assign(lines[li].data(), static_cast<std::size_t>(keep));
                line += "...";
            }
        }

        for (int ci = 0; ci < static_cast<int>(line.size()); ++ci) {
            unsigned char ch = static_cast<unsigned char>(line[ci]);
            if (ch < 32 || ch > 127) ch = 32;
            const unsigned char* rows = kFont6x8[ch - 32];
            for (int ry = 0; ry < kGlyphHeight; ++ry) {
                unsigned char bits = rows[ry];
                for (int rx = 0; rx < kGlyphWidth; ++rx) {
                    if (bits & (1u << rx)) {
                        float px = origin_x + (static_cast<float>(ci * kGlyphWidth + rx) * scale);
                        float py = origin_y + static_cast<float>(li) * line_height + static_cast<float>(ry) * scale;
                        Rect rect{px, py, scale, scale};
                        ctx.add_shadowed_quad_pixels(rect, color);
                    }
                }
            }
        }
    }
}

} // namespace wf::ui
